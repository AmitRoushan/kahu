/*
Copyright 2022 The SODA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package kahu.metaservice;

import "google/protobuf/wrappers.proto";

option go_package = "lib/go;metaservice";

// Resource specifies the name of a resource and whether it is namespaced.
message K8SResource {
  // name is the plural name of the resource.
  string name = 1;

  // namespaced indicates if a resource is namespaced or not.
  bool namespaced = 2;

  // kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
  string kind = 3;

  // group is the group of the resource.  Empty implies the group of the core resource list.
  // For subresources, this may have a different value, for example: Scale".
  string group = 4;

  string namespace = 5;

  // version is the version of the resource.
  // For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
  string version = 9;
}

message Resource {
  oneof Identity {
    K8SResource k8s_resource = 1;
    string key = 3;
  }
  bytes data = 2;
}

message Backup {
  string handle = 1;
  map <string, string> parameters = 9;
}

message UploadRequest {
  oneof Request{
    Backup backup = 1;
    Resource resource = 2;
  }
}

message DownloadRequest {
    Backup backup = 1;
    Resource resource = 2;
}

message DeleteRequest {
  Backup backup = 1;
}

message DownloadResponse {
  repeated Resource resources = 1;
}

message Empty {}

message ObjectExistsRequest {
  oneof Identity {
    K8SResource k8s_resource = 1;
    string key = 2;
  }

  // Backup Identifier
  Backup backup = 3;
}

message ObjectExistsResponse{
  // Indicates if file exists
  bool exists = 1;
}

// Probe request to check health/availability
message ProbeRequest{}

// Response to indicate health/availability status
message ProbeResponse {
  // Indicates if healthy/available or not
  google.protobuf.BoolValue ready = 1;
}

service MetaService {
  rpc Upload(stream UploadRequest)
      returns (Empty) {}
  rpc Download(DownloadRequest)
      returns (stream DownloadResponse) {}
  rpc Delete(DeleteRequest)
      returns (Empty) {}
  rpc ObjectExists(ObjectExistsRequest)
      returns (ObjectExistsResponse) {}
  // Probe provider for availability check
  rpc Probe(ProbeRequest)
      returns (ProbeResponse) {}
}

