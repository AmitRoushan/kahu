/*
Copyright 2022 The SODA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package kahu.volumeservice;

import "google/protobuf/wrappers.proto";
import "k8s.io/api/core/v1/generated.proto";

option go_package = "lib/go;volumeservice";

service VolumeService {
  rpc Backup(BackupRequest)
    returns (stream BackupResponse){}

  rpc DeleteBackup(DeleteBackupRequest)
    returns (Empty){}

  rpc Restore(RestoreRequest)
      returns (stream RestoreResponse){}

  rpc DeleteRestore(DeleteRestoreRequest)
      returns (Empty){}

  // Probe provider for availability check
  rpc Probe(ProbeRequest)
      returns (ProbeResponse) {}

}

message Snapshot {
  string snapshot_handle = 1;
  map<string, string> snapshot_attributes = 9;
}

message BackupVolume {
  k8s.io.api.core.v1.PersistentVolume pv = 1;
  Snapshot snapshot = 2;
  string mount_path = 3;
}

message BackupRequest {
  string backup_content_name = 1;

  // Required field
  repeated BackupVolume backupInfo = 2;

  // optional
  map <string, string> parameters = 9;

  // optional
  string location = 3;
}

message BackupProgress {
  string volume = 1;
  string backup_handle = 2;
  map<string,string> backup_attribute = 3;
  int32 progress = 4;
}

message Event {
  string type = 1;
  string name = 2;
  string message = 3;
}

message BackupState {
  repeated BackupProgress progress = 1;
}

message BackupResponse {
  string name = 1;
  oneof Data {
    Event event = 2;
    BackupState state = 3;
  }
}

message DeleteBackupRequest {
  string name = 1;
  map <string, string> parameters = 9;
}

message RestoreRequest {}

message RestoreResponse {}

message DeleteRestoreRequest {}

message Empty {}

// Probe request to check health/availability
message ProbeRequest{}

// Response to indicate health/availability status
message ProbeResponse {
  // Indicates if healthy/available or not
  google.protobuf.BoolValue ready = 1;
}


